package message

import golang_tls3 "github.com/xiaowang7777/golang-tls3"

/*
For reasons of backward compatibility with middleboxes (see
Appendix D.4), the HelloRetryRequest message uses the same structure
as the ServerHello, but with Random set to the special value of the
SHA-256 of "HelloRetryRequest":
CF 21 AD 74 E5 9A 61 11 BE 1D 8C 02 1E 65 B8 91
C2 A2 11 16 7A BB 8C 5E 07 9E 09 E2 C8 A8 33 9C
Upon receiving a message with type server_hello, implementations MUST
first examine the Random value and, if it matches this value, process
it as described in Section 4.1.4).
TLS 1.3 has a downgrade protection mechanism embedded in the server’s
random value. TLS 1.3 servers which negotiate TLS 1.2 or below in
response to a ClientHello MUST set the last 8 bytes of their Random
value specially in their ServerHello.
If negotiating TLS 1.2, TLS 1.3 servers MUST set the last 8 bytes of
their Random value to the bytes:
44 4F 57 4E 47 52 44 01
If negotiating TLS 1.1 or below, TLS 1.3 servers MUST, and TLS 1.2
servers SHOULD, set the last 8 bytes of their ServerHello.Random
value to the bytes:
44 4F 57 4E 47 52 44 00
*/

type ServerHello struct {
	legacyVersion           golang_tls3.ProtocolVersion // tls3必须为 0x0303 tls2的版本号
	random                  golang_tls3.Random          // The last 8 bytes MUST be overwritten as described below if negotiating TLS 1.2 or TLS 1.1, but the remaining bytes MUST be random. This structure is generated by the server and MUST be generated independently of the ClientHello.random
	legacySessionId         []byte
	cipherSuite             golang_tls3.CipherSuite
	legacyCompressionMethod uint8 // =0
	extensions              []Extension
}
